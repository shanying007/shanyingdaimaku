#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
1.使用数组和指针的形式实现冒泡排序，并优化。bubble_sort();
void bubble_sort(int *str)
{
	int i=0;
	int j=0;
	int k=0;
	for(k=0;k<10;k++)
	{
      for(i=0,j=i+1;i<9;i++)
        {
	       if(str[i]>str[j])
		     {
		       int tmp=str[i];
			   str[i]=str[j];
			   str[j]=tmp;
		      }
		   j++;
          }
	  for(i=0,j=1;i<9,j<10;i++,j++)
	  {
	     if(str[i]>str[j])
		 {
		    break;
		 }
	  }
	  if(i==8)
		  break;
	}
}
int main()
{
	int i=0;
	int str[10]={0,1,3,5,2,4,1,9,6,56};
	bubble_sort(str);
	for(i=0;i<10;i++)
	{
	    printf("%d ",str[i]);
	}
   system("pause");
   return 0;
}
指针：
void bubble_sort(int *str)
{
	int *p=NULL;
	int *start=NULL;
	int k=0;
	int i=0;
    int count=0;
	p=str+1;
	start=str;
	for(k=0;k<10;k++)
	{
		str=start;
		p=str+1;
      for(i=0;i<9;i++)
	   {
	       if(*str>*p)
		     {
		       int tmp=*str;
			   *str=*p;
			   *p=tmp;
		      }
           count=1;
		   p++;
		   str++;
         }
		   if(count==0)
			   break;
	}
}
int main()
{
	int i=0;
	int str[10]={0,1,3,5,2,4,1,9,6,56};
	bubble_sort(str);
    for(i=0;i<10;i++)
	{
		printf("%d ",str[i]);
	}
   system("pause");
   return 0;
}
2.调整数组使奇数全部都位于偶数前面。

题目：
输入一个整数数组，实现一个函数，来调整该数组中数字的顺序使得数组中所有的奇数位于数组的前半部分，
所有偶数位于数组的后半部分。
void jiou_sort(int *str)
{
	int *p=NULL;
	int *start=NULL;
	int k=0;
	int i=0;
	p=str+1;
	start=str;
	for(k=0;k<10;k++)
	{
		str=start;
		p=str+1;
      for(i=0;i<9;i++)
	   {
	       if(*str%2==0)
		     {
		       int tmp=*str;
			   *str=*p;
			   *p=tmp;
		      }
		   p++;
		   str++;
         }
	}
}

int main()
{
	int i=0;
	int arr[10]={1,4,7,8,6,4,4,8,4,9};
	jiou_sort(arr);
    for(i=0;i<10;i++)
      {
		printf("%d ",arr[i]);
       }
  system("pause");
  return 0;
}
3.
有一个二维数组.----杨氏矩阵
数组的每行从左到右是递增的，每列从上到下是递增的.
在这样的数组中查找一个数字是否存在。
时间复杂度小于0(N);

1 2 3
4 5 6
7 8 9
int find(int arr[][3],int a)
{
   int *left=&arr[0][0];
   int *right=&arr[2][2];
   int *mid=left-(left-right)/2;
   while(left<=right)
   {
	   if(a>*mid)
         {
           left=mid+1;
         }
       if(a<*mid)
	   {
	      right=mid-1;
	   }
	   if(a==*mid)
	   {
	      return 1;
	   }
   }
    if(left>right)
	{
		return 0;
	}
}
int main()
{
	int ret=0;
	int arr[3][3]={1,2,3,4,5,6,7,8,9};
    int a=0;
	scanf("%d",&a);
	ret=find(arr,a);
	if(ret==1)
		printf("存在");
	if(ret==0)
		printf("不存在");
	system("pause");
	return 0;
}
