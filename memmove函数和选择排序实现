3.模拟实现memmove函数。

void *my_memmove(void *dest,const void *src,size_t count)
{
	void *ret=dest;
	assert(src!=NULL);
	assert(dest!=NULL);
	   if(dest>=src&&(char *)dest<=(char *)src+count)
	   {
		   while(count--)
	         {
	           *(((char *)dest)+count)=*(((char *)src)+count);
		     }
	    }
	   else 
	   {
		   while(count)
		   {
			   *(char *)dest=*(char *)src;
		       dest=(char *)dest+1;
		       src=(char *)src+1;
		       count--;
	   }
}
	   return ret;
}
int main()
{
    int i=0;
	int arr[]={1,2,3,4,5,6,7};
    my_memmove(arr+2,arr,4*sizeof(int));
    for(i=0;i<7;i++)
	{
	   printf("%d ",arr[i]);
	}
	system("pause");
	return 0;
}
4.实现一个选择排序程序，排序整型数组。
int * choice_sort(int *arr,int n)
{
	int *ret=arr;
	
	int i=0;
	int j=0;
    assert(arr);
   for(i=0;i<n-1;i++)
   {
	   int count=0;
	   for(j=1+i;j<n;j++)
	   {
          if(arr[i]>arr[j])
		  {
		     int tmp=arr[i];
			 arr[i]=arr[j];
			 arr[j]=tmp;
		  }
		  count++;
         }
	   if(count==1)
		   break;

   }
   return ret;
}
int main()
{
	int *ret=NULL;
    int i=0;
	int sz=0;
	int arr[10]={1,4,2,6,8,9,5,3,8,0};
	sz=sizeof(arr)/sizeof(arr[0]);
	ret=choice_sort(arr,sz);
      for(i=0;i<10;i++)
	{
	   printf("%d ",ret[i]);
	}
	system("pause");
	return 0;
}
