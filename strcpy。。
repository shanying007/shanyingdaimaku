#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
1.模拟实现strcpy
char* my_strcpy(char *dest,const char *src)
{
	 char* ret=dest;
     assert(dest!=NULL);
     assert(src!=NULL);
   while(*dest++=*src++)
   {
      ;
   }
   return ret;
}
int main()
{
    char *p;
	char arr[20]={0};
	char *str="hahahhah";
	p=my_strcpy(arr,str);
    printf("%s",p);
	system("pause");
	return 0;
}
2.模拟实现strlen
unsigned int my_strlen (char *s)
{
	int count=0;
	assert(s!=NULL);
    while(*s++)
	{
	   count++;
	}
   return count;
}
int main()
{
    int ret=0;
	char arr[]={"asdasdasda"};
	ret=my_strlen(arr);
	printf("%d",ret);
	system("pause");
	return 0;
}
3.
有一个字符数组的内容为:"student a am i",请你将数组的内容改为"i am a student".
要求：
不能使用库函数。只能开辟有限个空间（空间个数和字符串的长度无关）。

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include<string.h>
void reverse_str(char *left, char *right)
{
	assert(left);
	assert(right);
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}


void reverse(char arr[])
{
	char *begin = arr;
	char *end = arr + strlen(arr)-1;
	char *c = NULL;
	if ((arr == NULL) || (arr[0] == '\0'))
	{
		return;
	}
	reverse_str(begin, end);//逆序整个字符数组

	while (*arr)
	{
		c = arr;
		while (*arr != '\0' && *arr != ' ')
		{
			arr++;
		}
		end = arr - 1;
		reverse_str(c, end);
		if (*arr == ' ')
			arr++;
	}
}

int main()
{
	char arr[] = "student a am i";
	//i ma a tneduts
	//i am a student
	reverse(arr);
	printf("%s\n", arr);
	system("pause");
	return 0;
}
//4.
//linux环境实践，熟悉使用（网络搜索）
//ls   //list 列出当前文件夹的所有文件
//cd   //change directory 更改（切换）目录
//mkdir //make directory 创建目录（文件夹）
//rm    //remove 删除文件（-f）
//mv    //move  移动文件
//touch //创建文件
//pwd   //print work directory打印当前工作目录
//
//5.在linux环境实践，使用vim编写一个程序，然后使用gcc查看【预处理】、【编译】、【汇编】、【链接】各阶段文件的内容。并熟悉相关指令。
//
//
