#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<stdarg.h>
#include<string.h>
1.模拟实现printf
my_printf("s ccc.","hello",'b','i','t');
void my_printf(const char* c,...)
{
  char tmp;
  va_list arg;
  va_start(arg,c);
    while(tmp=*c++)
	{
		switch(tmp)
		{
			case 'c':
		       {
		          char ch=va_arg(arg,char);
		          putchar(ch);
		          break;
		       }
			case 's':
				{
				  char *p=va_arg(arg,char*);
				  fputs(p,stdout);
				  break;
				}
                default:
				putchar(tmp);
		}
	}
             va_end(arg);
}
int main()
{
  my_printf("s ccc.","hello",'b','i','t');
  system("pause");
  return 0;
}
2.利用main函数的参数实现一个计算器，
输入test.exe -a 100 200执行加法
输入test.exe -s 100 200执行减法
输入test.exe -m 100 200执行乘法
输入test.exe -d 100 200执行除法

int main(int arg,char *argv[])
{
	int c=0;
	int num1=100;
	int num2=200;
	scanf("%d%d",&num1,&num2);
	gets(*argv);
	if(strcmp(*argv,"a")==0)
	{
			c=num1+num2;
			printf("%d",c);
	}
	if(strcmp(*argv,"s")==0)
	{
			c=num1+num2;
			printf("%d",c);
	}
	if(strcmp(*argv,"m")==0)
	{
			c=num1+num2;
			printf("%d",c);
	}
	if(strcmp(*argv,"d")==0)
	{
			c=num1+num2;
		printf("%d",c);
	}
		
    system("pause");
	return 0;
}
3.编写一个函数实现n^k，使用递归实现

int my_pow(int a,int b)
{
	int c=1;
	int d=0;
	int e=0;
    if(b>1)
	{
	   b--;
	   e=a;
	   c=my_pow(a,b);
	}
	   d=a*c;

	return d;
}
int main()
{
    int a=0;
	int b=0;
	int ret=0;
	scanf("%d%d",&a,&b);
	ret=my_pow(a,b);
	printf("%d",ret);
	system("pause");
	return 0;
}
4. 写一个递归函数DigitSum(n)，输入一个非负整数，返回组成它的数字之和，
例如，调用DigitSum(1729)，则应该返回1+7+2+9，它的和是19。
int DigitSum(int n)
{
	int a=0;
	int b=0;
	int c=0;
	int d=0;
   if(n>0)
   {
     a=n%10;
	 b=n/10;
	 n=b;
     c=DigitSum(n);
   }
     d=a+c;
	 return d;
}

int main()
{
	int n=0;
	int ret=0;
	scanf("%d",&n);
    ret=DigitSum(n);
	printf("%d",ret);
	system("pause");
    return 0;
}



