#define _CRT_SECURE_NO_WARNINGS
#include<stdlib.h>
#include<iostream>
#include<stack>
using namespace std;
//归并排序递归版
//void Merge(int arr[], int* temp, int left, int mid, int right)
//{
//	int begin1 = left;
//	int end1 = mid;
//	int begin2 = mid + 1;
//	int end2 = right;
//	int idx = left;
//	while (begin1 <= end1&&begin2 <= end2)
//	{
//		if (arr[begin1] < arr[begin2])
//		{
//			temp[idx++] = arr[begin1++];
//		}
//		else
//			temp[idx++] = arr[begin2++];
//	}
//	while(begin1 <= end1)
//	{
//		temp[idx++] = arr[begin1++];
//	}
//	while (begin2 <= end2)
//	{
//		temp[idx++] = arr[begin2++];
//	}
//}
//void _MergeSort(int arr[], int* temp, int left, int right)
//{
//	/*if (right - left < 16)
//	{
//		InsertSort(arr, left, right);
//	}*/
//	if (left < right)
//	{
//		int mid = left + ((right - left) >> 1);
//		_MergeSort(arr, temp, left, mid);
//		_MergeSort(arr, temp, mid+1, right);
//		Merge(arr, temp, left, mid, right);
//		memcpy(arr + left, temp + left, (right - left + 1)*sizeof(arr[0]));
//	}
//
//}
//void MergeSort(int arr[], int size)
//{
//	int *temp = new int[size];
//	_MergeSort(arr, temp, 0, size - 1);
//	delete[] temp;
//}
//void Printf(int arr[], size_t size)
//{
//	for (size_t idx = 0; idx < size; ++idx)
//	{
//		printf("%d ", arr[idx]);
//	}
//}
//int main()
//{
//	int arr[] = { 2, 0, 1, 5, 7, 4, 9, 8, 6, 3 };
//	int size = sizeof(arr) / sizeof(arr[0]);
//	MergeSort(arr, size);
//	Printf(arr, size);
//	system("pause");
//	return 0;
//}
//归并排序非递归版
void Merge(int arr[], int* temp, int left, int mid, int right)
{
	int begin1 = left;
	int end1 = mid;
	int begin2 = mid + 1;
	int end2 = right;
	int idx = left;
	while (begin1 <= end1&&begin2 <= end2)
	{
		if (arr[begin1] < arr[begin2])
		{
			temp[idx++] = arr[begin1++];
		}
		else
			temp[idx++] = arr[begin2++];
	}
	while (begin1 <= end1)
	{
		temp[idx++] = arr[begin1++];
	}
	while (begin2 <= end2)
	{
		temp[idx++] = arr[begin2++];
	}
}
void MergeSort(int arr[], int size)
{
	int *temp = new int[size];
	int left = 0;
	int right = size - 1;
	int gap = 1;
	while (gap<size)
	{
		for (int idx = 0; idx < size; idx+=2*gap)
		{
			left = idx;
			int mid = left + gap - 1;
			right = mid + gap;
			//处理越界情况
			if (mid >= size)
				mid = size - 1;
			if (right >= size)
				right = size - 1;
			Merge(arr, temp, left, mid, right);
		}
		memcpy(arr, temp, size*sizeof(int));
		gap <<= 1;
	}
	delete[] temp;
}
void Printf(int arr[], size_t size)
{
	for (size_t idx = 0; idx < size; ++idx)
	{
		printf("%d ", arr[idx]);
	}
}
int main()
{
	int arr[] = { 2, 0, 1, 5, 7, 4, 9, 8, 6, 3 };
	int size = sizeof(arr) / sizeof(arr[0]);
	MergeSort(arr, size);
	Printf(arr, size);
	system("pause");
	return 0;
}
