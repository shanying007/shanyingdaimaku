#include<iostream>
#include<vector>
#include<assert.h>
using namespace std;
template<class T>
class Heap
{
public:
	Heap()
	{}
	Heap(const T arr[], size_t size)
	{
		for (size_t idx = 0; idx < size; ++idx)
		{
			_heap.push_back(arr[idx]);
		}
		size_t root = (size - 2) / 2;
		for (int idx = root; idx >= 0; --idx)
		{
			_AdjustDown(idx, size);
		}
	}
	void Insert(const T& data)
	{
		_heap.push_back(data);
		size_t size = _heap.size();
		if (size > 1)
		{
			//size_t root = (size - 2) / 2;
			_AdjustUp(size);
		}
	}
	void Remove()
	{
		assert(!Empty());
		size_t size = _heap.size();
		if (size > 0)
		{
			std::swap(_heap[0], _heap[size]);
			_heap.pop_back();
			_AdjustDown(0, size - 1);
		}
		else
		{
			_heap.pop_back();
		}
	}
	bool Empty()
	{
		return _heap.empty();
	}
	size_t Size()const
	{
		return _heap.size();
	}
T& Top<T>
{
	return _heap[0];
}
private:
	void _AdjustDown(size_t root, size_t size)
	{
		size_t parent = root;
		size_t child = root * 2 + 1;
		while (child < size)
		{
			if (child + 1 < size&&_heap[child + 1] < _heap[child])
			{
				child = child + 1;
			}
			if (_heap[parent]>_heap[child])
			{
				std::swap(_heap[parent], _heap[child]);
				parent=child;
				child = child * 2 + 1;
			}
			else
			{
				break;
			}
		}
	}
	void _AdjustUp(size_t size)
	{
		size_t parent = (size - 2) / 2;
		size_t child = size - 1;
		while (child != 0)
		{
			if (_heap[child] < _heap[parent])
			{
				std::swap(_heap[child], _heap[parent]);
				child = parent;
				parent = (child - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}

private:
    std :: vector<T> _heap;

};
void Funtest()
{
	int arr[] = {53,17,78,9,45,65,87,23};
	Heap<int> hp(arr,sizeof(arr)/sizeof(arr[0]));
	hp.Insert(6);

}
int main()
{
	Funtest();
	return 0;
}
模板参数
#include<iostream>
#include<vector>
#include<assert.h>
using namespace std;
template<class T>
class Less
{
public:
	bool operator()(const T& left,const T& right)
	{
		return (left > right);
	}
};
template<class T>
class Greater
{
public:
	bool operator()(const T& left, const T& right)
	{
		return (left <= right);
	}
};
template<class T,class Compare=Less<T>>
class Heap
{
public:
	Heap()
	{}
	Heap(const T arr[], size_t size)
	{
		for (size_t idx = 0; idx < size; ++idx)
		{
			_heap.push_back(arr[idx]);
		}
		size_t root = (size - 2) / 2;
		for (int idx = root; idx >= 0; --idx)
		{
			_AdjustDown(idx, size);
		}
	}
	void Insert(const T& data)
	{
		_heap.push_back(data);
		size_t size = _heap.size();
		if (size > 1)
		{
			_AdjustUp(size);
		}
	}
	void Remove()
	{
		assert(!Empty());
		size_t size = _heap.size();
		if (size > 0)
		{
			std::swap(_heap[0], _heap[size]);
			_heap.pop_back();
			_AdjustDown(0, size - 1);
		}
		else
		{
			_heap.pop_back();
		}
	}
	bool Empty()
	{
		return _heap.empty();
	}
	size_t Size()const
	{
		return _heap.size();
	}
T& Top<T>
{
	return _heap[0];
}
private:
	void _AdjustDown(size_t root, size_t size)
	{
		size_t parent = root;
		size_t child = root * 2 + 1;
		while (child < size)
		{
			if (child + 1 < size&&_heap[child + 1] < _heap[child])
			{
				child = child + 1;
			}
			if (Compare()(_heap[parent],_heap[child]))
			{
				std::swap(_heap[parent], _heap[child]);
				parent = child;
				child = child * 2 + 1;
			}
			else
			{
				break;
			}
		}
	}
	void _AdjustUp(size_t size)
	{
		size_t parent = (size - 2) / 2;
		size_t child = size - 1;
		while (child != 0)
		{
			if (Compare()(_heap[parent], _heap[child]))
			{
				std::swap(_heap[child], _heap[parent]);
				child = parent;
				parent = (child - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}

private:
	std::vector<T> _heap;

};
void Funtest()
{
	int arr[] = { 53, 17, 78, 9, 45, 65, 87, 23 };
	Heap<int,Greater<int>> hp(arr, sizeof(arr) / sizeof(arr[0]));
	hp.Insert(6);

}
int main()
{
	Funtest();
	return 0;
}
#include<iostream>
#include<vector>
#include<queue>
#include<assert.h>
using namespace std;
template<class T>
class Less
{
public:
	bool operator()(const T& left,const T& right)
	{
		bool b = left> right;
		return b;
	}
};
template<class T>
class Greater
{
public:
	bool operator()(const T& left, const T& right)
	{
		return (left <= right);
	}
};
template<class T,template<class> class Compare = Less>
class Heap
{
public:
	Heap()
	{}
	Heap(const T arr[], size_t size)
	{
		for (size_t idx = 0; idx < size; ++idx)
		{
			_heap.push_back(arr[idx]);
		}
		size_t root = (size - 2) / 2;
		for (int idx = root; idx >= 0; --idx)
		{
			_AdjustDown(idx, size);
		}
	}
	void Insert(const T& data)
	{
		_heap.push_back(data);
		size_t size = _heap.size();
		if (size > 1)
		{
			_AdjustUp(size);
		}
	}
	void Remove()
	{
		assert(!Empty());
		size_t size = _heap.size();
		if (size > 0)
		{
			std::swap(_heap[0], _heap[size-1]);
			_heap.pop_back();
			_AdjustDown(0, size - 1);
		}
		else
		{
			_heap.pop_back();
		}
	}
	bool Empty()
	{
		return _heap.empty();
	}
	size_t Size()const
	{
		return _heap.size();
	}
	T& Top()
	{
		return _heap[0];
	}
private:
	void _AdjustDown(size_t root, size_t size)
	{
		size_t parent = root;
		size_t child = root * 2 + 1;
		while (child < size)
		{
			if (child + 1 < size&&Compare<T>(_heap[child + 1] , _heap[child]))
			{
				child = child + 1;
			}
			if (Compare<T>()(_heap[child], _heap[parent]))
			{
				std::swap(_heap[parent], _heap[child]);
				parent = child;
				child = child * 2 + 1;
			}
			else
			{
				break;
			}
		}
	}
	void _AdjustUp(size_t size)
	{
		size_t parent = (size - 2) / 2;
		size_t child = size - 1;
		while (child != 0)
		{
			if (Compare<T>()(_heap[child], _heap[parent]))
			{
				std::swap(_heap[child], _heap[parent]);
				child = parent;
				parent = (child - 1) / 2;
			}
			else
			{
				break;
			}
		}
	}

private:
	std::vector<T> _heap;

};
void Funtest()
{
	int arr[] = { 53, 17, 78, 9, 45, 65, 87, 23 };
	Heap<int,Greater> hp(arr, sizeof(arr) / sizeof(arr[0]));
	hp.Insert(6);

}
int main()
{
	Funtest();
	return 0;
}
